package [(${location.generatePath})];

import com.alibaba.fastjson.JSONObject;
import com.black.api.GetApiProperty;
import com.black.api.PostApiProperty;
import com.black.core.aop.servlet.RequiredVal;
import com.black.core.sql.annotation.OpenSqlPage;
import com.black.core.annotation.ChiefServlet;
import com.black.core.sql.action.NullRepair;
import [(${superPath})];
import com.black.core.autoTree.builder.ApiRemark;
import com.black.core.sql.annotation.OpenTransactional;
import com.black.core.util.LazyAutoWried;
[# th:if="${createMapper}"]import [(${mapperPath})].[(${source.className})]Mapper;[/]
import lombok.extern.log4j.Log4j2;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import static com.black.utils.ServiceUtils.*;

@Log4j2
@ChiefServlet("[(${source.lowName})]")
@ApiRemark("[(${source.remark})] - 操作接口") @OpenTransactional @SuppressWarnings("all")
public class [(${source.className})]Controller extends [(${superName})] {
    [# th:if="${createMapper}"]
    @LazyAutoWried
    [(${source.className})]Mapper [(${source.lowName})]Mapper;[/]
    [# th:unless="${dict}"]
    @Override
    public String getTableName() {
        return "[(${source.tableName})]";
    }
    [/]

    //**************************************************************************
    //          A   U   T   O           C   R   E   A   T   E       (LEVEL 1)
    //**************************************************************************

    @GetApiProperty(url = "selectById",
            response = "[(${source.tableName})]{}", remark = "根据 id 查询接口", hide = true)
    public Object selectById(@RequestParam(DEFAULT_PRIMARY_KEY) Object id){
        return super.doSelectById(id);
    }

    @OpenSqlPage
    @PostApiProperty(url = "list",
            request = "[(${source.tableName})]{}", response = "[(${source.tableName})][]", remark = "列表查询接口", hide = true)
    public Object select(@RequestBody(required = false) JSONObject body){
        return doSelectList(body);
    }

    @PostApiProperty(url = "findSingle",
            request = "[(${source.tableName})]{}", response = "[(${source.tableName})]{}", remark = "查询一条数据", hide = true)
    public Object findSingle(@RequestBody JSONObject body){
        return doSelectSingle(body);
    }

    @PostApiProperty(url = "insert",
            request = "[(${source.tableName})]{}", remark = "普通插入接口", hide = true)
    public Object insert(@RequestBody JSONObject body){
        return doInsertBatch(Collections.singletonList(body));
    }

    @PostApiProperty(url = "insertBatch",
            request = "[(${source.tableName})][]", remark = "批次插入接口", hide = true)
    public Object insertBatch(@RequestBody List<Map<String, Object>> array){
        return doInsertBatch(array);
    }

    @PostApiProperty(url = "update",
            request = "[(${source.tableName})]{}", remark = "更新接口, 主键必需", hide = true)
    public Object update(@RequestBody @NullRepair JSONObject body, @RequiredVal(DEFAULT_PRIMARY_KEY) String id){
        return doUpdate(body, id);
    }

    @PostApiProperty(url = "save",
            request = "[(${source.tableName})]{}", remark = "修改或者添加, 有主键则修改, 否则添加", hide = true)
    public Object save(@RequestBody @NullRepair JSONObject body){
        return doSave(body);
    }

    @PostApiProperty(url = "saveBatch",
            request = "[(${source.tableName})][]", remark = "批次: 修改或者添加, 有主键则修改, 否则添加", hide = true)
    public Object saveBatch(@RequestBody @NullRepair List<Map<String, Object>> batch){
        for (Map<String, Object> map : batch) {
            doSave(map);
        }
        return null;
    }

    @PostApiProperty(url = "delete",
            request = "[(${source.tableName})]{}", remark = "根据条件 map 删除接口", hide = true)
    public Object delete(@RequestBody JSONObject body){
        return doDelete(body);
    }

    @GetApiProperty(url = "deleteById", remark = "根据主键删除接口", hide = true)
    public Object deleteById(@RequestParam(DEFAULT_PRIMARY_KEY) Object id){
        return doDelete(id);
    }

    @PostApiProperty(url = "deleteAllById",
            request = "$R: [id]", remark = "根据主键集合删除数据", hide = true)
    public Object deleteAllById(@RequestBody List<Object> idList){
        return doDeleteAllById(idList);
    }
    [# th:if="${supportIllDel}"]
    @GetApiProperty(url = "illDelById", remark = "根据主键逻辑删除数据", hide = true)
    public Object illDelById(@RequestParam(DEFAULT_PRIMARY_KEY) String id){
        return doUpdate(getIllSetMap(), id);
    }

    @PostApiProperty(url = "illDel", request = "[(${source.tableName})]{}", remark = "根据条件 map 逻辑删除数据", hide = true)
    public Object illDel(@RequestBody JSONObject body){
        return doIllDel(body);
    }

    @PostApiProperty(url = "illDelAllById", request = "$R: [id]", remark = "根据主键集合逻辑删除数据", hide = true)
    public Object illDelAllById(@RequestBody List<Object> idList){
        return doIllDelAllById(idList);
    }
    [/]
}