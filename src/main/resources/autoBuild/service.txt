package [(${s.scannerPath})];

import com.alibaba.fastjson.JSONObject;
import [(${s.daoData.pojoData.scannerPath})].[(${s.daoData.pojoData.javaPojoClassName})];

import java.util.List;

public interface [(${s.daoData.pojoData.javaPojoClassName})]Service {

    /***
     * 查询数据接口,只不过传递 json 格式数据,需要解析
     * @param json json 数据
     * @return 返回结果集合
     */
    JSONObject query[(${s.daoData.pojoData.javaPojoClassName})](String json);

    /***
     * 模糊查询数据接口,只不过传递 json 格式数据,需要解析
     * @param json json 数据
     * @return 返回结果集合
     */
    JSONObject vagueQuery[(${s.daoData.pojoData.javaPojoClassName})](String json);

    /***
     * 查询数据接口
     * @param condition 实体类作为查询条件
     * @return 返回结果集合
     */
    JSONObject vagueQuery[(${s.daoData.pojoData.javaPojoClassName})]([(${s.daoData.pojoData.javaPojoClassName})] condition);

    /***
     * 查询数据接口
     * @param condition 实体类作为查询条件
     * @param pageNum 分页, 当前页数
     * @param pageSize 每页大小
     * @return 返回响应结果
     */
    JSONObject vagueQuery[(${s.daoData.pojoData.javaPojoClassName})]([(${s.daoData.pojoData.javaPojoClassName})] condition, Object pageNum, Object pageSize);


    /***
     * 查询数据接口
     * @param condition 实体类作为查询条件
     * @return 返回结果集合
     */
    JSONObject query[(${s.daoData.pojoData.javaPojoClassName})]([(${s.daoData.pojoData.javaPojoClassName})] condition);

    /***
     * 查询数据接口
     * @param condition 实体类作为查询条件
     * @param pageNum 分页, 当前页数
     * @param pageSize 每页大小
     * @return 返回响应结果
     */
    JSONObject query[(${s.daoData.pojoData.javaPojoClassName})]([(${s.daoData.pojoData.javaPojoClassName})] condition, Object pageNum, Object pageSize);

    /***
     * 查询数据接口,只不过确定结果一定唯一
     * 如果结果不唯一,则会抛出{@link RuntimeException} 异常
     * @param json json 数据
     * @return 返回结果集合
     */
    JSONObject queryAndResultOnly(String json);

    /***
     * 根据查询条件,能够保证查询到的结果只有一个
     * @param condition 条件
     * @return 返回原始的实体类对象,不会被封账,也不会被转成 json 格式
     */
    [(${s.daoData.pojoData.javaPojoClassName})] queryOnlyResult([(${s.daoData.pojoData.javaPojoClassName})] condition);

    /***
     * 查询数据接口,只不过确定结果一定唯一
     * 如果结果不唯一,则会抛出{@link RuntimeException} 异常
     * @param condition 条件
     * @return 唯一的数据
     */
    JSONObject queryAndResultOnly([(${s.daoData.pojoData.javaPojoClassName})] condition);

    /***
     * 添加多条数据
     * @param json json 字符串格式, 需要将json转成 array 数组
     *             解析错误,则会抛出异常
     * @return 返回json响应结果
     */
    JSONObject insert[(${s.daoData.pojoData.javaPojoClassName})]s(String json);

    /***
     * 插入多条数据, 集合形式
     * @param dataGroup 条目数量
     * @return 返回json响应结果
     */
    JSONObject insert[(${s.daoData.pojoData.javaPojoClassName})]s(List<[(${s.daoData.pojoData.javaPojoClassName})]> dataGroup);


    /***
     * 添加一条数据
     * @param json json 格式数据,需要解析
     * @return 返回是否添加成功
     */
    JSONObject insert[(${s.daoData.pojoData.javaPojoClassName})](String json);

    /***
     * 插入一条数据
     * @param [(${s.daoData.pojoData.headLowercaseJavaClassName})] 数据封装实体类
     * @return 是否插入成功
     */
    JSONObject insert[(${s.daoData.pojoData.javaPojoClassName})]([(${s.daoData.pojoData.javaPojoClassName})] [(${s.daoData.pojoData.headLowercaseJavaClassName})]);

    /***
     * 更新一组数据
     * @param json json 格式,需要解析成实体类
     * @return 返回是否更新
     */
    JSONObject update[(${s.daoData.pojoData.javaPojoClassName})](String json);

    /***
     * 更新一组数据
     * @param condition 封装条件,更新数据,根据 mapper 来自由定义
     * @return 是否更新成功
     */
    JSONObject update[(${s.daoData.pojoData.javaPojoClassName})]([(${s.daoData.pojoData.javaPojoClassName})] condition);

    /***
     * 删除一组数据
     * @param json 删除条件 json
     * @return 返回是否删除成功,封装成响应结果
     */
    JSONObject delete[(${s.daoData.pojoData.javaPojoClassName})](String json);

    /***
     * 删除一组数据
     * @param condition 删除条件
     * @return 返回是否删除成功
     */
    JSONObject delete[(${s.daoData.pojoData.javaPojoClassName})]([(${s.daoData.pojoData.javaPojoClassName})] condition);

    /***
     * 删除一组数据,参数可能传数组,需要解析
     * @param json 删除条件 json
     * @return 返回是否删除成功,封装成响应结果
     */
    JSONObject delete[(${s.daoData.pojoData.javaPojoClassName})]List(String json);

    /***
     * 删除多组数据
     * @param dataGroup 条件集合
     * @return 响应结果
     */
    JSONObject delete[(${s.daoData.pojoData.javaPojoClassName})]List(List<[(${s.daoData.pojoData.javaPojoClassName})]> dataGroup);

    /***
     * 真正删除一条数据, 不是假删除
     * @param condition 条件
     * @return 返回响应结果
     */
    JSONObject reallyDelete([(${s.daoData.pojoData.javaPojoClassName})] condition);
}