package [(${source.implPath})];

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.black.core.mvc.response.ResponseUtil;
import com.black.core.servlet.HttpRequestUtil;
import com.black.core.json.JSONConvert;
import [(${source.daoPath})].[(${source.className})]Mapper;
import [(${source.pojoPath})].[(${source.className})];
import lombok.NonNull;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.black.core.response.VariablePool.*;

@Log4j2
@Service
public class [(${source.className})]Impl extends JSONConvert {

    @Autowired
    [(${source.className})]Mapper [(${source.lowName})]Mapper;

    /***
     * 查询数据接口,只不过传递 json 格式数据,需要解析
     * @param json json 数据
     * @return 返回结果集合
     */
    public Object query[(${source.className})](JSONObject json) {
        return ResponseUtil.ok([(${source.lowName})]Mapper.queryElements(json));
    }

    /***
     * 根据查询条件,能够保证查询到的结果只有一个
     * @param condition 条件
     * @return 返回原始的实体类对象,不会被封账,也不会被转成 json 格式
     */
    public Object queryOnlyResult(JSONObject condition){

        List<Map<String, Object>> results = [(${source.lowName})]Mapper.queryElements(condition);
        return results.isEmpty() ? null : results.get(0);
    }

    /***
     * 插入多条数据, 集合形式
     * @param args 条目数量
     * @return 返回json响应结果
     */
    @Transactional(propagation = Propagation.REQUIRED)
    public Object insert[(${source.className})]s(@NonNull List<JSONObject> args) {
        List<[(${source.className})]> data
        = args.stream()
              .map(s ->convertPojo(s, new [(${source.className})]()).complete())
              .collect(Collectors.toList());
        if (!data.isEmpty()){
            HttpRequestUtil.ifIll([(${source.lowName})]Mapper.insertElementsList(data), INSERT_FAIL);
        }
        return ResponseUtil.ok();
    }

    /***
     * 更新一组数据
     * @param json 封装条件,更新数据,根据 mapper 来自由定义
     * @return 是否更新成功
     */
    public Object update[(${source.className})](@NonNull JSONObject json) {
         if (![(${source.lowName})]Mapper.updateElement(convertPojo(json, new [(${source.className})]()))) {
             throw new RuntimeException(UPDATE_WORK_FAIL);
         }
         return ResponseUtil.ok();
    }

    /***
     * 删除一组数据
     * @param json 删除条件
     * @return 返回是否删除成功
     */
    public Object delete[(${source.className})](@NonNull JSONObject json) {
        [(${source.className})] condition = convertPojo(json, new [(${source.className})]());

        HttpRequestUtil.ifIll(!condition.isNullBean(), DELETE_CONDITION_IS_NULL);
        HttpRequestUtil.ifIll([(${source.lowName})]Mapper.deleteElement(condition), DELETE_FAIL);
        return ResponseUtil.ok();
    }

    /***
     * 删除一组数据,参数可能传数组,需要解析
     * @param array 删除条件 json
     * @return 返回是否删除成功,封装成响应结果
     */
    @Transactional(propagation = Propagation.REQUIRED)
    public Object delete[(${source.className})]List(@NonNull JSONArray array) {

        try {
            for (Object o : array) {
               delete[(${source.className})]((JSONObject) o);
            }

        }catch (JSONException ex) {
            throw new RuntimeException(DELETE_FAIL);
        }
        return ResponseUtil.ok();
    }
}