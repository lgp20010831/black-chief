package [(${location.generatePath})];

import com.alibaba.fastjson.JSONObject;
import com.black.api.ApiJdbcProperty;
import com.black.core.annotation.Sort;
import com.black.core.aop.servlet.AnalyzedMethod;
import com.black.core.aop.servlet.RequiredVal;
import com.black.core.sql.annotation.OpenSqlPage;
import com.black.swagger.ChiefMapSqlAdaptive;
import com.black.test.TestedNozzle;
import com.black.core.annotation.ChiefServlet;
import [(${superPath})];
import com.black.core.autoTree.builder.ApiRemark;
import com.black.core.sql.annotation.OpenTransactional;
import com.black.core.util.LazyAutoWried;
import [(${mapperPath})].[(${source.className})]Mapper;
import lombok.extern.log4j.Log4j2;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import static com.black.utils.ServiceUtils.*;

@Log4j2
@ChiefServlet("[(${source.lowName})]")
@ApiRemark("[(${source.remark})] - 操作接口") @OpenTransactional @SuppressWarnings("all")
public class [(${source.className})]Controller extends [(${superName})] {

    @LazyAutoWried
    [(${source.className})]Mapper [(${source.lowName})]Mapper;
    [# th:unless="${dict}"]
    @Override
    protected String getTableName() {
        return "[(${source.tableName})]";
    }
    [/]

    //****************************************************************
    //          A   U   T   O           C   R   E   A   T   E
    //****************************************************************

    @Sort(1)
    @TestedNozzle(8)
    @GetMapping("selectById")
    @ApiJdbcProperty(request = "url: ?id=xxxx", response = "$<getTableName>{}",
            remark = "根据 id 查询接口", hide = true)
    public Object selectById(@RequestParam(DEFAULT_PRIMARY_KEY) Object id){
        return super.doSelectById(id);
    }



    @Sort(2)
    @OpenSqlPage
    @TestedNozzle(7)
    @PostMapping("list")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(response = "$<getTableName>[]", request = "$<getTableName>{}",
            remark = "列表查询接口", hide = true)
    public Object select(@RequestBody(required = false) JSONObject body){
        return doSelectList(body);
    }


    @Sort(3)
    @TestedNozzle(9)
    @PostMapping("findSingle")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(response = "$<getTableName>{}", request = "$<getTableName>{}",
            remark = "查询一条数据", hide = true)
    public Object findSingle(@RequestBody JSONObject body){
        return doSelectSingle(body);
    }


    @Sort(4)
    @TestedNozzle(2)
    @PostMapping("insert")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(request = "$<getTableName>{}", remark = "普通插入接口", hide = true)
    public Object insert(@RequestBody JSONObject body){
        return doInsertBatch(Collections.singletonList(body));
    }

    @Sort(5)
    @TestedNozzle(1)
    @PostMapping("insertBatch")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(request = "$<getTableName>[]", remark = "批次插入接口", hide = true)
    public Object insertBatch(@RequestBody List<Map<String, Object>> array){
        return doInsertBatch(array);
    }

    @Sort(6)
    @TestedNozzle(5)
    @AnalyzedMethod
    @PostMapping("update")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(request = "$<getTableName>{}", remark = "更新接口, 主键必需", hide = true)
    public Object update(@RequestBody @NullRepair JSONObject body, @RequiredVal(DEFAULT_PRIMARY_KEY) String id){
        return doUpdate(body, id);
    }


    @Sort(7)
    @TestedNozzle(3)
    @PostMapping("save")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(request = "$<getTableName>{}", remark = "修改或者添加, 有主键则修改, 否则添加", hide = true)
    public Object save(@RequestBody @NullRepair JSONObject body){
        return doSave(body);
    }

    @Sort(8)
    @TestedNozzle(4)
    @PostMapping("saveBatch")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(request = "$<getTableName>[]",
            remark = "批次: 修改或者添加, 有主键则修改, 否则添加", hide = true)
    public Object saveBatch(@RequestBody @NullRepair List<Map<String, Object>> batch){
        for (Map<String, Object> map : batch) {
            doSave(map);
        }
        return null;
    }

    @Sort(9)
    @TestedNozzle(14)
    @PostMapping("delete")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(request = "$<getTableName>{}", remark = "根据条件 map 删除接口", hide = true)
    public Object delete(@RequestBody JSONObject body){
        return doDelete(body);
    }

    @Sort(10)
    @TestedNozzle(13)
    @GetMapping("deleteById")
    @ApiJdbcProperty(request = "url: ?id=xxxx", remark = "根据主键删除接口", hide = true)
    public Object deleteById(@RequestParam(DEFAULT_PRIMARY_KEY) Object id){
        return doDelete(id);
    }

    @Sort(11)
    @TestedNozzle(15)
    @PostMapping("deleteAllById")
    @ApiJdbcProperty(request = "$R: [id]", remark = "根据主键集合删除数据", hide = true)
    public Object deleteAllById(@RequestBody List<Object> idList){
        return doDeleteAllById(idList);
    }

    @Sort(12)
    @TestedNozzle(11)
    @GetMapping("illDelById")
    @ApiJdbcProperty(request = "url: ?id=xxxx", remark = "根据主键逻辑删除数据", hide = true)
    public Object illDelById(@RequestParam(DEFAULT_PRIMARY_KEY) String id){
        return doUpdate(getIllSetMap(), id);
    }

    @Sort(13)
    @TestedNozzle(12)
    @PostMapping("illDel")
    @ChiefMapSqlAdaptive(mappingTableNameMethodName = "getTableName")
    @ApiJdbcProperty(request = "$<getTableName>{}", remark = "根据条件 map 逻辑删除数据", hide = true)
    public Object illDel(@RequestBody JSONObject body){
        return doIllDel(body);
    }


    @Sort(14)
    @TestedNozzle(17)
    @PostMapping("illDelAllById")
    @ApiJdbcProperty(request = "$R: [id]", remark = "根据主键集合逻辑删除数据", hide = true)
    public Object illDelAllById(@RequestBody List<Object> idList){
        return doIllDelAllById(idList);
    }
}