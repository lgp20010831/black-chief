package [(${location.generatePath})];

import com.alibaba.fastjson.JSONObject;
import [(${superPath})];
import [(${mapperPath})].[(${source.className})]Mapper;
import [(${pojoPath})].[(${source.className})];
import [(${implPath})].[(${source.className})]Impl;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.black.ibtais.IbatisFullParentServlet;
import com.black.core.annotation.ChiefServlet;
import com.black.core.aop.servlet.OpenIbatisPage;
import com.black.core.mvc.response.Response;
import com.black.swagger.ChiefIbatisAdaptive;
import com.black.swagger.ChiefSwaggerResponseAdaptive;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.Serializable;
import java.util.*;

import static com.black.utils.ServiceUtils.*;

@Log4j2
@Api(tags = "[(${source.remark})]")
@ChiefServlet("[(${source.lowName})]") @SuppressWarnings("all")
public class [(${source.className})]Controller extends [(${superName})]<[(${source.className})]> {

    @Autowired
    [(${source.className})]Mapper [(${source.lowName})]Mapper;

    @Autowired
    [(${source.className})]Impl [(${source.lowName})]Impl;

    @Override
    protected ServiceImpl<[(${source.className})]Mapper, [(${source.className})]> getImpl() {
        return [(${source.lowName})]Impl;
    }

    @Override
    protected BaseMapper<[(${source.className})]> getMapper() {
        return [(${source.lowName})]Mapper;
    }



    //****************************************************************************************
    //                               A U T O   C R E A T E
    //****************************************************************************************

    @OpenIbatisPage
    @PostMapping("selectList")
    @ChiefSwaggerResponseAdaptive(target = [(${source.className})].class, list = true)
    @ApiOperation(value = "列表查询接口", hidden = true)
    public Object findList(@RequestBody(required = false) @ChiefIbatisAdaptive(target = [(${source.className})].class) JSONObject body){
        return doFindList(body);
    }

    @PostMapping("selectSingle")
    @ChiefSwaggerResponseAdaptive(target = [(${source.className})].class)
    @ApiOperation(value = "查询一条数据", hidden = true)
    public Object selectSingle(@RequestBody(required = false) @ChiefIbatisAdaptive(target = [(${source.className})].class) JSONObject body){
        return doSelectSingle(body);
    }

    @GetMapping("selectById")
    @ChiefSwaggerResponseAdaptive(target = [(${source.className})].class)
    @ApiOperation(value = "根据 id 查询接口", hidden = true)
    public Object findById(@RequestParam Serializable id){
        return doFindById(id);
    }

    @PostMapping("insertBatch")
    @ApiOperation(value = "批次插入接口", response = Response.class, hidden = true)
    public Object insertBatch(@RequestBody @ChiefIbatisAdaptive(target = [(${source.className})].class) List<Map<String, Object>> array){
        return doInsertBatch(array);
    }

    @PostMapping("insert")
    @ApiOperation(value = "普通添加一条数据", response = Response.class, hidden = true)
    public Object join(@RequestBody @ChiefIbatisAdaptive(target = [(${source.className})].class) JSONObject body){
        return doJoin(body);
    }

    @PostMapping("saveBatch")
    @ApiOperation(value = "批次: 修改或者添加, 有主键则修改, 否则添加", response = Response.class, hidden = true)
    public Object saveBatch(@RequestBody @ChiefIbatisAdaptive(target = [(${source.className})].class) List<Map<String, Object>> array){
        return doSaveBatch(array);
    }

    @PostMapping("save")
    @ApiOperation(value = "修改或者添加, 有主键则修改, 否则添加", response = Response.class, hidden = true)
    public Object save0(@RequestBody @ChiefIbatisAdaptive(target = [(${source.className})].class) JSONObject body){
        return doSave0(body);
    }

    @PostMapping("delete")
    @ApiOperation(value = "根据条件 map 删除接口", response = Response.class, hidden = true)
    public Object delete0(@RequestBody @ChiefIbatisAdaptive(target = [(${source.className})].class) JSONObject body){
        return doDelete0(body);
    }

    @GetMapping("deleteById")
    @ApiOperation(value = "根据主键删除接口", response = Response.class, hidden = true)
    public Object deleteById0(@RequestParam Serializable id){
        return doDeleteById0(id);
    }

    @PostMapping("deleteAllById")
    @ApiOperation(value = "根据主键集合删除数据", response = Response.class, hidden = true)
    public Object deleteAllById0(@RequestBody List<Object> idList){
        return doDeleteAllById0(idList);
    }

    @GetMapping("illDel")
    @ApiOperation(value = "根据条件 map 删除接口", response = Response.class, hidden = true)
    public Object illDel(@RequestBody@ChiefIbatisAdaptive(target = [(${source.className})].class) JSONObject body){
        return doIllDel(body);
    }

    @GetMapping("illDelById")
    @ApiOperation(value = "根据主键逻辑删除数据", response = Response.class, hidden = true)
    public Object illDelById(@RequestParam Serializable id){
       return doIllDelById(id);
    }

    @PostMapping("illDelAllById")
    @ApiOperation(value = "根据主键集合逻辑删除数据", response = Response.class, hidden = true)
    public Object illDelAllById(@RequestBody List<Object> idList){
        return doIllDelAllById(idList);
    }

}