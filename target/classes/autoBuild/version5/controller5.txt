package [(${source.controllerPath})];

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.black.core.json.JsonUtils;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.black.core.aop.servlet.plus.WriedDeletionWrapper;
import com.black.core.aop.servlet.plus.WriedQueryWrapper;
import com.black.core.aop.servlet.plus.WriedUpdateWrapper;
import com.black.core.aop.servlet.OpenIbatisPage;
import com.black.core.aop.servlet.GlobalEnhanceRestController;
import [(${source.daoPath})].[(${source.className})]Mapper;
import [(${source.pojoPath})].[(${source.className})];
import [(${source.implPath})].[(${source.className})]Impl;
import com.black.core.servlet.HttpRequestUtil;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


@Log4j2
@RequestMapping @CrossOrigin
@GlobalEnhanceRestController    @SuppressWarnings("all")
public class [(${source.className})]Controller {

    @Autowired
    [(${source.className})]Impl impl;

    @Autowired
    [(${source.className})]Mapper mapper;

    /** 查询数据接口 **/
    @OpenIbatisPage
    @PostMapping("query[(${source.className})]")
    public Object query[(${source.className})](@RequestBody JSONObject body, @WriedQueryWrapper QueryWrapper<[(${source.className})]> wrapper){
        return mapper.selectList(wrapper);
    }

    /** 添加数据接口 **/
    @PostMapping("insert[(${source.className})]List")
    public Object insert[(${source.className})]List(@RequestBody JSONArray array){
        return HttpRequestUtil.caseIll(impl.saveBatch(JsonUtils.toBeanArray(array, [(${source.className})].class, true)), "添加失败");
    }

    /** 更新数据接口 **/
    @PostMapping("update[(${source.className})]")
    public Object update[(${source.className})](@RequestBody JSONObject body, @WriedUpdateWrapper(requiredProperties = "id", condition = "id", autoInjection = "updatedAt") UpdateWrapper<[(${source.className})]> wrapper){
       return HttpRequestUtil.caseIll(impl.update(wrapper), "更新失败");
    }

    /** 删除数据接口 **/
    @PostMapping("delete[(${source.className})]")
    public Object delete[(${source.className})](@RequestBody JSONArray array, @WriedDeletionWrapper(autoInjection = {"isDeleted : true"}) UpdateWrapper<[(${source.className})]> wrapper){
       return HttpRequestUtil.caseIll(impl.update(wrapper), "删除失败");
    }
}