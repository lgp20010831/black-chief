package [(${source.daoPath})];

import com.black.core.builder.Col;
import [(${source.pojoPath})].[(${source.className})];
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Delete;
import java.util.List;
import java.util.Map;

@Repository
public interface [(${source.className})]Mapper {

   /***
     * 根据 id 查询出总量的数据
     * @param id 根据一个可指定的 id 作为参数
     * @return 查询到的数据集合
     */
    @Select("select " +
                "* " +
                "from [(${source.tableName})] where " +
                "id = #{id}")
    List<[(${source.className})]> queryById(@Param("id")String id);

   /***
     * 绝对查询,查询结果只为一条数据
     * @param data 根据一个可指定的 id 作为参数
     * @return 查询到的数据集合
     */
    default [(${source.className})] queryAbsolutely([(${source.className})] data){
        List<[(${source.className})]> result;
        return (result = queryElements(data)).isEmpty() ? null : result.get(0);
    }

    /***
      * 根据条件，查询元素对象
      * @param data 实体类对象作为参数: {@link [(${source.className})]}
      * @return 查询到的数据集合
      */
    List<[(${source.className})]> queryElements(@Param("data") [(${source.className})] data);

    /***
     * 插入元素，参数为实体类对象
     * @param data 实体类对象作为参数: {@link [(${source.className})]}
     * @return 是否插入数据成功
     */
    default boolean insertElements([(${source.className})] data){
          return insertElementsList(Col.as(data));
    }

    /***
     * 插入多条数据, 集合形式
     * @param dataGroup 条目数量
     * @return 是否添加成功
     */
    boolean insertElementsList(@Param("list") List<[(${source.className})]> dataGroup);

    /***
     * 更新元素对象
     * @param data 实体类对象作为参数: {@link [(${source.className})]}
     * @return 是否更新数据成功
     */
    boolean updateElement(@Param("data") [(${source.className})] data);

    /***
     * 删除元素对象
     * @param data 实体类对象作为参数: {@link [(${source.className})]}
     * @return 是否删除数据成功
     */
    boolean deleteElement(@Param("data") [(${source.className})] data);

     /***
       * 按照 data 条件筛选,真实的删除数据库里的数据
       * @param id 条件
       * @return 返回是否删除成功
       */
    @Delete("delete from [(${source.className})] where id = #{id}")
    boolean reallyDeleteElement(String id);
}